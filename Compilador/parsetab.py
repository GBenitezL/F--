
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR COLON COMMA CTEC CTEF CTEI CTESTRING DIVIDE ELSE EQ EQUALS FALSE FLOAT FOR FUNCTION GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MAIN MEAN MEDIAN MINUS NE OR PLOT PLUS PRINT PROGRAM RAND RBRACE RBRACKET READ RETURN RPAREN SCOLON STD TIMES TRUE VAR VARIANCE VOID WHILEprogram : PROGRAM ID SCOLON program_2\n        | PROGRAM ID SCOLON vars program_2program_2 : function program_2\n        | main_blockmain_block : MAIN LPAREN RPAREN block\n        | MAIN LPAREN RPAREN vars blockblock : LBRACE statements RBRACE\n        | LBRACE RBRACEvars : vars_2vars_2 : VAR vars_3 vars_2\n        | VAR vars_3vars_3 : ID COLON type SCOLON\n        |  ID COMMA vars_3type : INT array\n        | FLOAT array\n        | CHAR array\n        | BOOL arrayarray : LBRACKET CTEI RBRACKET\n        | epsilonfunction : FUNCTION ID COLON return_type LPAREN params RPAREN block\n        | FUNCTION ID COLON return_type LPAREN params RPAREN vars block\n        | FUNCTION ID COLON return_type LPAREN RPAREN block\n        | FUNCTION ID COLON return_type LPAREN RPAREN vars blockreturn_type : VOID\n        | typeparams : ID COLON type COMMA params\n        | ID COLON typefunction_call_return : ID LPAREN RPAREN\n        | ID LPAREN function_params RPARENfunction_call_void : ID LPAREN RPAREN SCOLON\n        | ID LPAREN function_params RPAREN SCOLONfunction_params : expression\n        | expression COMMA function_paramsreturn : RETURN expression SCOLONstatements : assignment statements_2\n        | condition statements_2\n        | write statements_2\n        | read statements_2\n        | loop statements_2\n        | return statements_2\n        | function_call_void statements_2\n        | plot statements_2statistics : mean\n        | median\n        | variance\n        | standard_deviation\n        | randstatements_2 : statements\n        | epsilonassignment : ID EQUALS expression SCOLON\n        | ID LBRACKET expression RBRACKET EQUALS expression SCOLONcondition : IF LPAREN expression RPAREN block\n        |  IF LPAREN expression RPAREN block ELSE blockexpression : exp\n        | comparison\n        | logical\n    comparison : exp LT exp\n        | exp LE exp\n        | exp GT exp\n        | exp GE exp\n        | exp EQ exp\n        | exp NE explogical : expression AND expression\n        | expression OR expressionexp : term\n        | term exp_2exp_2 : PLUS exp\n        | MINUS expterm : factor\n        | factor term_2term_2 : TIMES term\n        | DIVIDE termfactor : LPAREN expression RPAREN\n        | ID LBRACKET expression RBRACKET\n        | function_call_return\n        | factor_2\n        | statisticsfactor_2 : PLUS constant\n        | MINUS constant\n        | constantconstant : ID\n        | CTEI\n        | CTEF\n        | CTEC\n        | TRUE\n        | FALSEloop : for_loop\n        | while_loopwhile_loop : WHILE LPAREN expression RPAREN blockfor_loop : FOR LPAREN ID EQUALS expression SCOLON expression SCOLON expression RPAREN blockwrite : PRINT LPAREN write_2 RPAREN SCOLONwrite_2 : expression COMMA write_2\n        | CTESTRING COMMA write_2\n        | expression\n        | CTESTRINGread : READ LPAREN read_2 RPAREN SCOLONread_2 : ID\n        | ID LBRACKET expression RBRACKETmean : MEAN LPAREN ID RPARENmedian : MEDIAN LPAREN ID RPARENvariance : VARIANCE LPAREN ID RPARENstandard_deviation : STD LPAREN ID RPARENrand : RAND LPAREN CTEI COMMA CTEI RPARENplot : PLOT LPAREN ID COMMA ID RPAREN SCOLONepsilon : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,8,13,14,31,43,45,69,],[0,-1,-4,-2,-3,-5,-6,-8,-7,]),'ID':([2,10,12,23,33,36,45,46,47,48,49,50,51,52,53,58,59,60,69,80,81,82,83,84,85,92,97,99,115,116,117,134,135,136,137,138,139,140,141,142,144,145,147,148,150,151,155,156,157,158,167,169,171,174,175,177,199,200,202,204,205,207,208,211,222,229,230,231,233,235,238,],[3,15,18,18,54,65,-8,54,54,54,54,54,54,54,54,-87,-88,93,-7,93,93,93,93,93,133,93,153,153,160,161,93,-34,93,93,93,93,93,93,93,93,93,93,93,93,93,93,194,195,196,197,-50,-30,93,93,93,93,220,93,65,93,-31,-52,-91,-96,-89,93,-51,-53,-104,93,-90,]),'SCOLON':([3,27,28,29,30,34,37,39,40,41,42,86,87,88,89,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,122,123,125,143,146,152,153,154,170,173,176,178,179,180,181,182,183,184,185,186,187,188,189,190,192,213,214,215,216,217,218,221,224,228,232,234,],[4,-105,-105,-105,-105,64,-14,-19,-15,-16,-17,134,-54,-55,-56,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-18,167,169,-66,-70,-78,-81,-79,205,208,211,-63,-64,-57,-58,-59,-60,-61,-62,-67,-68,-71,-72,-73,-28,-74,-29,-99,-100,-101,-102,229,230,233,-103,235,]),'FUNCTION':([4,6,7,9,17,21,35,45,64,69,120,164,166,203,],[10,10,10,-9,-11,-10,-13,-8,-12,-7,-22,-20,-23,-21,]),'MAIN':([4,6,7,9,17,21,35,45,64,69,120,164,166,203,],[11,11,11,-9,-11,-10,-13,-8,-12,-7,-22,-20,-23,-21,]),'VAR':([4,17,20,35,64,67,119,],[12,12,12,-13,-12,12,12,]),'LBRACE':([9,17,20,21,32,35,64,67,119,121,165,172,201,225,237,],[-9,-11,33,-10,33,-13,-12,33,33,33,33,33,33,33,33,]),'LPAREN':([11,24,25,26,27,28,29,30,37,39,40,41,42,54,55,56,57,60,61,62,63,80,81,82,83,84,92,93,110,111,112,113,114,117,122,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[16,36,-24,-25,-105,-105,-105,-105,-14,-19,-15,-16,-17,82,83,84,85,92,115,116,117,92,92,92,92,92,92,151,155,156,157,158,159,92,-18,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'COLON':([15,18,65,],[19,22,118,]),'RPAREN':([16,27,28,29,30,36,37,39,40,41,42,66,82,87,88,89,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,122,126,127,128,129,130,131,132,133,143,146,149,151,152,153,154,162,163,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,197,206,209,210,213,214,215,216,217,218,220,223,226,227,232,236,],[20,-105,-105,-105,-105,67,-14,-19,-15,-16,-17,119,125,-54,-55,-56,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-18,170,-32,172,173,-94,-95,176,-97,-66,-70,190,192,-78,-81,-79,201,-27,-63,-64,-57,-58,-59,-60,-61,-62,-67,-68,-71,-72,-73,-28,214,215,216,217,218,-33,-92,-93,-74,-29,-99,-100,-101,-102,228,-26,-98,232,-103,237,]),'COMMA':([18,27,28,29,30,37,39,40,41,42,87,88,89,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,122,127,130,131,143,146,152,153,154,160,163,178,179,180,181,182,183,184,185,186,187,188,189,190,192,198,213,214,215,216,217,218,232,],[23,-105,-105,-105,-105,-14,-19,-15,-16,-17,-54,-55,-56,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-18,171,174,175,-66,-70,-78,-81,-79,199,202,-63,-64,-57,-58,-59,-60,-61,-62,-67,-68,-71,-72,-73,-28,219,-74,-29,-99,-100,-101,-102,-103,]),'VOID':([19,],[25,]),'INT':([19,22,118,],[27,27,27,]),'FLOAT':([19,22,118,],[28,28,28,]),'CHAR':([19,22,118,],[29,29,29,]),'BOOL':([19,22,118,],[30,30,30,]),'LBRACKET':([27,28,29,30,54,93,133,],[38,38,38,38,81,150,177,]),'RBRACE':([33,44,45,46,47,48,49,50,51,52,53,58,59,69,70,71,72,73,74,75,76,77,78,79,134,167,169,205,207,208,211,222,230,231,233,238,],[45,69,-8,-105,-105,-105,-105,-105,-105,-105,-105,-87,-88,-7,-35,-48,-49,-36,-37,-38,-39,-40,-41,-42,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'IF':([33,45,46,47,48,49,50,51,52,53,58,59,69,134,167,169,205,207,208,211,222,230,231,233,238,],[55,-8,55,55,55,55,55,55,55,55,-87,-88,-7,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'PRINT':([33,45,46,47,48,49,50,51,52,53,58,59,69,134,167,169,205,207,208,211,222,230,231,233,238,],[56,-8,56,56,56,56,56,56,56,56,-87,-88,-7,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'READ':([33,45,46,47,48,49,50,51,52,53,58,59,69,134,167,169,205,207,208,211,222,230,231,233,238,],[57,-8,57,57,57,57,57,57,57,57,-87,-88,-7,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'RETURN':([33,45,46,47,48,49,50,51,52,53,58,59,69,134,167,169,205,207,208,211,222,230,231,233,238,],[60,-8,60,60,60,60,60,60,60,60,-87,-88,-7,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'PLOT':([33,45,46,47,48,49,50,51,52,53,58,59,69,134,167,169,205,207,208,211,222,230,231,233,238,],[61,-8,61,61,61,61,61,61,61,61,-87,-88,-7,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'FOR':([33,45,46,47,48,49,50,51,52,53,58,59,69,134,167,169,205,207,208,211,222,230,231,233,238,],[62,-8,62,62,62,62,62,62,62,62,-87,-88,-7,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'WHILE':([33,45,46,47,48,49,50,51,52,53,58,59,69,134,167,169,205,207,208,211,222,230,231,233,238,],[63,-8,63,63,63,63,63,63,63,63,-87,-88,-7,-34,-50,-30,-31,-52,-91,-96,-89,-51,-53,-104,-90,]),'CTEI':([38,60,80,81,82,83,84,92,97,99,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,159,171,174,175,177,200,204,219,229,235,],[68,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,198,105,105,105,105,105,105,227,105,105,]),'ELSE':([45,69,207,],[-8,-7,225,]),'EQUALS':([54,161,168,],[80,200,204,]),'PLUS':([60,80,81,82,83,84,90,91,92,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,117,135,136,137,138,139,140,141,142,144,145,146,147,148,150,151,152,153,154,171,174,175,177,188,189,190,192,200,204,213,214,215,216,217,218,229,232,235,],[97,97,97,97,97,97,144,-69,97,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,97,97,97,97,97,97,97,97,97,97,97,-70,97,97,97,97,-78,-81,-79,97,97,97,97,-71,-72,-73,-28,97,97,-74,-29,-99,-100,-101,-102,97,-103,97,]),'MINUS':([60,80,81,82,83,84,90,91,92,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,117,135,136,137,138,139,140,141,142,144,145,146,147,148,150,151,152,153,154,171,174,175,177,188,189,190,192,200,204,213,214,215,216,217,218,229,232,235,],[99,99,99,99,99,99,145,-69,99,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,99,99,99,99,99,99,99,99,99,99,99,-70,99,99,99,99,-78,-81,-79,99,99,99,99,-71,-72,-73,-28,99,99,-74,-29,-99,-100,-101,-102,99,-103,99,]),'CTEF':([60,80,81,82,83,84,92,97,99,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'CTEC':([60,80,81,82,83,84,92,97,99,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'TRUE':([60,80,81,82,83,84,92,97,99,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'FALSE':([60,80,81,82,83,84,92,97,99,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'MEAN':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'MEDIAN':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'VARIANCE':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'STD':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'RAND':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'RBRACKET':([68,87,88,89,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,124,143,146,152,153,154,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,212,213,214,215,216,217,218,232,],[122,-54,-55,-56,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,168,-66,-70,-78,-81,-79,-63,-64,-57,-58,-59,-60,-61,-62,-67,-68,-71,-72,-73,213,-28,226,-74,-29,-99,-100,-101,-102,-103,]),'CTESTRING':([84,174,175,],[131,131,131,]),'AND':([86,87,88,89,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,123,124,127,128,130,143,146,149,152,153,154,162,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,212,213,214,215,216,217,218,221,224,232,234,236,],[135,-54,-55,-56,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,135,135,135,135,135,-66,-70,135,-78,-81,-79,135,135,135,-57,-58,-59,-60,-61,-62,-67,-68,-71,-72,-73,135,-28,135,-74,-29,-99,-100,-101,-102,135,135,-103,135,135,]),'OR':([86,87,88,89,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,123,124,127,128,130,143,146,149,152,153,154,162,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,212,213,214,215,216,217,218,221,224,232,234,236,],[136,-54,-55,-56,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,136,136,136,136,136,-66,-70,136,-78,-81,-79,136,136,136,-57,-58,-59,-60,-61,-62,-67,-68,-71,-72,-73,136,-28,136,-74,-29,-99,-100,-101,-102,136,136,-103,136,136,]),'LT':([87,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,143,146,152,153,154,186,187,188,189,190,192,213,214,215,216,217,218,232,],[137,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-66,-70,-78,-81,-79,-67,-68,-71,-72,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),'LE':([87,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,143,146,152,153,154,186,187,188,189,190,192,213,214,215,216,217,218,232,],[138,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-66,-70,-78,-81,-79,-67,-68,-71,-72,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),'GT':([87,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,143,146,152,153,154,186,187,188,189,190,192,213,214,215,216,217,218,232,],[139,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-66,-70,-78,-81,-79,-67,-68,-71,-72,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),'GE':([87,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,143,146,152,153,154,186,187,188,189,190,192,213,214,215,216,217,218,232,],[140,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-66,-70,-78,-81,-79,-67,-68,-71,-72,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),'EQ':([87,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,143,146,152,153,154,186,187,188,189,190,192,213,214,215,216,217,218,232,],[141,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-66,-70,-78,-81,-79,-67,-68,-71,-72,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),'NE':([87,90,91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,143,146,152,153,154,186,187,188,189,190,192,213,214,215,216,217,218,232,],[142,-65,-69,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-66,-70,-78,-81,-79,-67,-68,-71,-72,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),'TIMES':([91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,152,153,154,190,192,213,214,215,216,217,218,232,],[147,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-78,-81,-79,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),'DIVIDE':([91,93,94,95,96,98,100,101,102,103,104,105,106,107,108,109,152,153,154,190,192,213,214,215,216,217,218,232,],[148,-81,-75,-76,-77,-80,-43,-44,-45,-46,-47,-82,-83,-84,-85,-86,-78,-81,-79,-73,-28,-74,-29,-99,-100,-101,-102,-103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_2':([4,6,7,],[5,13,14,]),'vars':([4,20,67,119,],[6,32,121,165,]),'function':([4,6,7,],[7,7,7,]),'main_block':([4,6,7,],[8,8,8,]),'vars_2':([4,17,20,67,119,],[9,21,9,9,9,]),'vars_3':([12,23,],[17,35,]),'return_type':([19,],[24,]),'type':([19,22,118,],[26,34,163,]),'block':([20,32,67,119,121,165,172,201,225,237,],[31,43,120,164,166,203,207,222,231,238,]),'array':([27,28,29,30,],[37,40,41,42,]),'epsilon':([27,28,29,30,46,47,48,49,50,51,52,53,],[39,39,39,39,72,72,72,72,72,72,72,72,]),'statements':([33,46,47,48,49,50,51,52,53,],[44,71,71,71,71,71,71,71,71,]),'assignment':([33,46,47,48,49,50,51,52,53,],[46,46,46,46,46,46,46,46,46,]),'condition':([33,46,47,48,49,50,51,52,53,],[47,47,47,47,47,47,47,47,47,]),'write':([33,46,47,48,49,50,51,52,53,],[48,48,48,48,48,48,48,48,48,]),'read':([33,46,47,48,49,50,51,52,53,],[49,49,49,49,49,49,49,49,49,]),'loop':([33,46,47,48,49,50,51,52,53,],[50,50,50,50,50,50,50,50,50,]),'return':([33,46,47,48,49,50,51,52,53,],[51,51,51,51,51,51,51,51,51,]),'function_call_void':([33,46,47,48,49,50,51,52,53,],[52,52,52,52,52,52,52,52,52,]),'plot':([33,46,47,48,49,50,51,52,53,],[53,53,53,53,53,53,53,53,53,]),'for_loop':([33,46,47,48,49,50,51,52,53,],[58,58,58,58,58,58,58,58,58,]),'while_loop':([33,46,47,48,49,50,51,52,53,],[59,59,59,59,59,59,59,59,59,]),'params':([36,202,],[66,223,]),'statements_2':([46,47,48,49,50,51,52,53,],[70,73,74,75,76,77,78,79,]),'expression':([60,80,81,82,83,84,92,117,135,136,150,151,171,174,175,177,200,204,229,235,],[86,123,124,127,128,130,149,162,178,179,191,127,127,130,130,212,221,224,234,236,]),'exp':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,150,151,171,174,175,177,200,204,229,235,],[87,87,87,87,87,87,87,87,87,87,180,181,182,183,184,185,186,187,87,87,87,87,87,87,87,87,87,87,]),'comparison':([60,80,81,82,83,84,92,117,135,136,150,151,171,174,175,177,200,204,229,235,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'logical':([60,80,81,82,83,84,92,117,135,136,150,151,171,174,175,177,200,204,229,235,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'term':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,188,189,90,90,90,90,90,90,90,90,90,90,]),'factor':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'function_call_return':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'factor_2':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'statistics':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'constant':([60,80,81,82,83,84,92,97,99,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[98,98,98,98,98,98,98,152,154,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'mean':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'median':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'variance':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'standard_deviation':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'rand':([60,80,81,82,83,84,92,117,135,136,137,138,139,140,141,142,144,145,147,148,150,151,171,174,175,177,200,204,229,235,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'function_params':([82,151,171,],[126,193,206,]),'write_2':([84,174,175,],[129,209,210,]),'read_2':([85,],[132,]),'exp_2':([90,],[143,]),'term_2':([91,],[146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SCOLON program_2','program',4,'p_program','parser.py',28),
  ('program -> PROGRAM ID SCOLON vars program_2','program',5,'p_program','parser.py',29),
  ('program_2 -> function program_2','program_2',2,'p_program_2','parser.py',33),
  ('program_2 -> main_block','program_2',1,'p_program_2','parser.py',34),
  ('main_block -> MAIN LPAREN RPAREN block','main_block',4,'p_main_block','parser.py',37),
  ('main_block -> MAIN LPAREN RPAREN vars block','main_block',5,'p_main_block','parser.py',38),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',41),
  ('block -> LBRACE RBRACE','block',2,'p_block','parser.py',42),
  ('vars -> vars_2','vars',1,'p_vars','parser.py',45),
  ('vars_2 -> VAR vars_3 vars_2','vars_2',3,'p_vars_2','parser.py',48),
  ('vars_2 -> VAR vars_3','vars_2',2,'p_vars_2','parser.py',49),
  ('vars_3 -> ID COLON type SCOLON','vars_3',4,'p_vars_3','parser.py',52),
  ('vars_3 -> ID COMMA vars_3','vars_3',3,'p_vars_3','parser.py',53),
  ('type -> INT array','type',2,'p_type','parser.py',56),
  ('type -> FLOAT array','type',2,'p_type','parser.py',57),
  ('type -> CHAR array','type',2,'p_type','parser.py',58),
  ('type -> BOOL array','type',2,'p_type','parser.py',59),
  ('array -> LBRACKET CTEI RBRACKET','array',3,'p_array','parser.py',62),
  ('array -> epsilon','array',1,'p_array','parser.py',63),
  ('function -> FUNCTION ID COLON return_type LPAREN params RPAREN block','function',8,'p_function','parser.py',66),
  ('function -> FUNCTION ID COLON return_type LPAREN params RPAREN vars block','function',9,'p_function','parser.py',67),
  ('function -> FUNCTION ID COLON return_type LPAREN RPAREN block','function',7,'p_function','parser.py',68),
  ('function -> FUNCTION ID COLON return_type LPAREN RPAREN vars block','function',8,'p_function','parser.py',69),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',72),
  ('return_type -> type','return_type',1,'p_return_type','parser.py',73),
  ('params -> ID COLON type COMMA params','params',5,'p_params','parser.py',76),
  ('params -> ID COLON type','params',3,'p_params','parser.py',77),
  ('function_call_return -> ID LPAREN RPAREN','function_call_return',3,'p_function_call','parser.py',80),
  ('function_call_return -> ID LPAREN function_params RPAREN','function_call_return',4,'p_function_call','parser.py',81),
  ('function_call_void -> ID LPAREN RPAREN SCOLON','function_call_void',4,'p_void_function_call','parser.py',84),
  ('function_call_void -> ID LPAREN function_params RPAREN SCOLON','function_call_void',5,'p_void_function_call','parser.py',85),
  ('function_params -> expression','function_params',1,'p_function_params','parser.py',88),
  ('function_params -> expression COMMA function_params','function_params',3,'p_function_params','parser.py',89),
  ('return -> RETURN expression SCOLON','return',3,'p_return','parser.py',92),
  ('statements -> assignment statements_2','statements',2,'p_statements','parser.py',95),
  ('statements -> condition statements_2','statements',2,'p_statements','parser.py',96),
  ('statements -> write statements_2','statements',2,'p_statements','parser.py',97),
  ('statements -> read statements_2','statements',2,'p_statements','parser.py',98),
  ('statements -> loop statements_2','statements',2,'p_statements','parser.py',99),
  ('statements -> return statements_2','statements',2,'p_statements','parser.py',100),
  ('statements -> function_call_void statements_2','statements',2,'p_statements','parser.py',101),
  ('statements -> plot statements_2','statements',2,'p_statements','parser.py',102),
  ('statistics -> mean','statistics',1,'p_statistics','parser.py',105),
  ('statistics -> median','statistics',1,'p_statistics','parser.py',106),
  ('statistics -> variance','statistics',1,'p_statistics','parser.py',107),
  ('statistics -> standard_deviation','statistics',1,'p_statistics','parser.py',108),
  ('statistics -> rand','statistics',1,'p_statistics','parser.py',109),
  ('statements_2 -> statements','statements_2',1,'p_statements_2','parser.py',112),
  ('statements_2 -> epsilon','statements_2',1,'p_statements_2','parser.py',113),
  ('assignment -> ID EQUALS expression SCOLON','assignment',4,'p_assignment','parser.py',116),
  ('assignment -> ID LBRACKET expression RBRACKET EQUALS expression SCOLON','assignment',7,'p_assignment','parser.py',117),
  ('condition -> IF LPAREN expression RPAREN block','condition',5,'p_condition','parser.py',120),
  ('condition -> IF LPAREN expression RPAREN block ELSE block','condition',7,'p_condition','parser.py',121),
  ('expression -> exp','expression',1,'p_expression','parser.py',124),
  ('expression -> comparison','expression',1,'p_expression','parser.py',125),
  ('expression -> logical','expression',1,'p_expression','parser.py',126),
  ('comparison -> exp LT exp','comparison',3,'p_comparison','parser.py',130),
  ('comparison -> exp LE exp','comparison',3,'p_comparison','parser.py',131),
  ('comparison -> exp GT exp','comparison',3,'p_comparison','parser.py',132),
  ('comparison -> exp GE exp','comparison',3,'p_comparison','parser.py',133),
  ('comparison -> exp EQ exp','comparison',3,'p_comparison','parser.py',134),
  ('comparison -> exp NE exp','comparison',3,'p_comparison','parser.py',135),
  ('logical -> expression AND expression','logical',3,'p_logical','parser.py',138),
  ('logical -> expression OR expression','logical',3,'p_logical','parser.py',139),
  ('exp -> term','exp',1,'p_exp','parser.py',142),
  ('exp -> term exp_2','exp',2,'p_exp','parser.py',143),
  ('exp_2 -> PLUS exp','exp_2',2,'p_exp_2','parser.py',146),
  ('exp_2 -> MINUS exp','exp_2',2,'p_exp_2','parser.py',147),
  ('term -> factor','term',1,'p_term','parser.py',150),
  ('term -> factor term_2','term',2,'p_term','parser.py',151),
  ('term_2 -> TIMES term','term_2',2,'p_term_2','parser.py',154),
  ('term_2 -> DIVIDE term','term_2',2,'p_term_2','parser.py',155),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',158),
  ('factor -> ID LBRACKET expression RBRACKET','factor',4,'p_factor','parser.py',159),
  ('factor -> function_call_return','factor',1,'p_factor','parser.py',160),
  ('factor -> factor_2','factor',1,'p_factor','parser.py',161),
  ('factor -> statistics','factor',1,'p_factor','parser.py',162),
  ('factor_2 -> PLUS constant','factor_2',2,'p_factor_2','parser.py',165),
  ('factor_2 -> MINUS constant','factor_2',2,'p_factor_2','parser.py',166),
  ('factor_2 -> constant','factor_2',1,'p_factor_2','parser.py',167),
  ('constant -> ID','constant',1,'p_constant','parser.py',170),
  ('constant -> CTEI','constant',1,'p_constant','parser.py',171),
  ('constant -> CTEF','constant',1,'p_constant','parser.py',172),
  ('constant -> CTEC','constant',1,'p_constant','parser.py',173),
  ('constant -> TRUE','constant',1,'p_constant','parser.py',174),
  ('constant -> FALSE','constant',1,'p_constant','parser.py',175),
  ('loop -> for_loop','loop',1,'p_loop','parser.py',178),
  ('loop -> while_loop','loop',1,'p_loop','parser.py',179),
  ('while_loop -> WHILE LPAREN expression RPAREN block','while_loop',5,'p_while_loop','parser.py',182),
  ('for_loop -> FOR LPAREN ID EQUALS expression SCOLON expression SCOLON expression RPAREN block','for_loop',11,'p_for_loop','parser.py',185),
  ('write -> PRINT LPAREN write_2 RPAREN SCOLON','write',5,'p_write','parser.py',188),
  ('write_2 -> expression COMMA write_2','write_2',3,'p_write_2','parser.py',191),
  ('write_2 -> CTESTRING COMMA write_2','write_2',3,'p_write_2','parser.py',192),
  ('write_2 -> expression','write_2',1,'p_write_2','parser.py',193),
  ('write_2 -> CTESTRING','write_2',1,'p_write_2','parser.py',194),
  ('read -> READ LPAREN read_2 RPAREN SCOLON','read',5,'p_read','parser.py',197),
  ('read_2 -> ID','read_2',1,'p_read_2','parser.py',200),
  ('read_2 -> ID LBRACKET expression RBRACKET','read_2',4,'p_read_2','parser.py',201),
  ('mean -> MEAN LPAREN ID RPAREN','mean',4,'p_mean','parser.py',204),
  ('median -> MEDIAN LPAREN ID RPAREN','median',4,'p_median','parser.py',207),
  ('variance -> VARIANCE LPAREN ID RPAREN','variance',4,'p_variance','parser.py',210),
  ('standard_deviation -> STD LPAREN ID RPAREN','standard_deviation',4,'p_standard_deviation','parser.py',213),
  ('rand -> RAND LPAREN CTEI COMMA CTEI RPAREN','rand',6,'p_rand','parser.py',216),
  ('plot -> PLOT LPAREN ID COMMA ID RPAREN SCOLON','plot',7,'p_plot','parser.py',219),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',222),
]
